# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
#-------------------------------------------------------------------------
version: 2.1
orbs:
  heroku: circleci/heroku@1.2.6
  snyk: snyk/snyk@0.0.12
  slack: circleci/slack@4.8.1
  python: circleci/python@1.4.0
slack-fail-post-step: &slack-fail-post-step
  post-steps:
    - slack/notify:
        event: fail
        template: basic_fail_1
executors:
  node-executor:
    docker:
      - image: cimg/node:14.16.0
  browser-executor:
    docker:
      - image: circleci/node:14.16.0-browsers
  e2e-executor:
    docker:
      - image: mcr.microsoft.com/playwright:bionic
        environment:
          NODE_ENV: development
# commands:
#   install-yarn-dependencies:
#     steps:
#       - restore_cache:
#           name: "Restore yarn dependencies"
#           keys:
#             - yarn-packages-app-deps-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}-{{ arch }}
#       - run:
#           name: "Install dependencies"
#           command: yarn install --immutable
#       - save_cache:
#           name: "Save yarn packages cache"
#           key: yarn-packages-app-deps-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}-{{ arch }}
#           paths:
#             - ./node_modules
#             - ./.yarn/cache
#   run-e2e-tests:
#     description: "Run E2E tests against 'host' environment"
#     parameters:
#       host:
#         type: string
#         default: "https://www-qa1.salesforce.com/?prorigin=c360"
#       type:
#         type: string
#         default: "live"
#       headers:
#         type: string
#         default: "" # each key value pair is colon punc separated, each set is comma separated eg header1:value,header2:value
#     steps:
#       - run: E2E_HOST=<< parameters.host >> E2E_HEADERS=<< parameters.headers >> yarn e2e:<< parameters.type >> --maxWorkers=2
#   git-tag:
#     description: "Tag current git commit with 'tag'"
#     parameters:
#       tag:
#         type: string
#         default: ""
#     steps:
#       - add_ssh_keys:
#           fingerprints:
#             - "f4:e0:5c:97:f2:57:58:a8:e2:c9:c5:b1:78:2e:88:6a"
#       - run: |
#           git tag -fa "<< parameters.tag >>" -m "<< parameters.tag >>"
#           git push -f origin --tags
#   lint_commit_message:
#     steps:
#       - run:
#           name: "Verify Commit Message"
#           command: |
#             echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")' >> $BASH_ENV
#             source $BASH_ENV
#             echo "$COMMIT_MESSAGE" | npx commitlint
jobs:
  deploy-mockgraphql-to-heroku:
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - heroku/install
      - heroku/check-authentication
      - checkout
      - run:
          name: "Set Heroku App name"
          command: |
            pwd
            app_name=$(echo "mockedgraphql-v3" | tr / - | cut -c1-24)
            echo "export HEROKU_APP_NAME=$app_name" >> $BASH_ENV
      - run:
          name: "Create app in heroku if it doesn't exist"
          command: |
            [ -z $(heroku apps -t ${HEROKU_TEAM_NAME} -s ${HEROKU_SPACE_NAME} \
                   | grep "${HEROKU_APP_NAME}") ] && (heroku apps:create ${HEROKU_APP_NAME} -t ${HEROKU_TEAM_NAME} \
                   --space=${HEROKU_SPACE_NAME}) \
                   || (echo "Skipping app creation....app ${HEROKU_APP_NAME} already exists")
      - run:
          name: "Create GITHUB_TOKEN environment var if it doesn't exist for the app in heroku"
          command: |
            [ -z $(heroku config:get GITHUB_TOKEN -a ${HEROKU_APP_NAME}) ] \
                   && heroku config:set GITHUB_TOKEN=${GITHUB_TOKEN} -a ${HEROKU_APP_NAME} \
                   || echo "GITHUB_TOKEN already Set.."
      - heroku/deploy-via-git:
          app-name: ${HEROKU_APP_NAME}

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - deploy-mockgraphql-to-heroku